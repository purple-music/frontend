// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  orders   Order[]
}

model Booking {
  id        Int      @id @default(autoincrement())
  startTime DateTime // Start time of the booking (UTC)
  endTime   DateTime // End time of the booking (UTC)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studioId Int
  studio   Studio @relation(fields: [studioId], references: [id])

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int
}

model Studio {
  id   Int    @id @default(autoincrement())
  name String

  bookings Booking[]
}

model Order {
  id Int @id @default(autoincrement())

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  bookings Booking[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime
}
