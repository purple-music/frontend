/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset password */
        post: operations["AuthController_resetPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/new-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** New password */
        post: operations["AuthController_newPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user profile */
        get: operations["AuthController_profile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register user */
        post: operations["AuthController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify email token */
        post: operations["AuthController_verify"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/time-slots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all time slots */
        get: operations["TimeSlotsController_getTimeSlots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/time-slots/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get time slots by user ID */
        get: operations["TimeSlotsController_getTimeSlotsByUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bookings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["BookingsController_makeBooking"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bookings/prices/{studioId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["BookingsController_getPrices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bookings/prices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["BookingsController_getAllPrices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        LoginRequestDto: {
            /** @example example@me.com */
            email: string;
            /** @example password */
            password: string;
        };
        LoginResponseDto: {
            /** @example Login successful */
            message: string;
        };
        ValidationErrorItemDto: {
            /**
             * @description The field that failed validation
             * @example email
             */
            field: string;
            /**
             * @description Validation error messages
             * @example [
             *       "email must be a valid email address"
             *     ]
             */
            messages?: string[];
            /** @description Nested validation errors */
            children?: components["schemas"]["ValidationErrorItemDto"][];
        };
        ValidationErrorResponseDto: {
            /**
             * @description HTTP status code
             * @example 400
             */
            statusCode: number;
            /**
             * @description Error message
             * @example Validation Failed
             */
            message: string;
            /** @description List of validation errors */
            errors: components["schemas"]["ValidationErrorItemDto"][];
            /**
             * @description Timestamp of the error
             * @example 2023-10-10T12:34:56.789Z
             */
            timestamp: string;
        };
        UnauthorizedResponseDto: {
            /** @example 401 */
            statusCode: number;
            /** @example Invalid credentials */
            message: string;
            /** @example UnauthorizedException */
            error: string;
        };
        ResetPasswordRequestDto: {
            email: string;
        };
        ResetPasswordResponseDto: {
            /** @example Password reset email sent successfully */
            message: string;
        };
        NewPasswordRequestDto: {
            password: string;
            token: string;
        };
        NewPasswordResponseDto: {
            /** @example Password reset successful */
            message: string;
        };
        LogoutResponseDto: {
            /** @example Logout successful */
            message: string;
        };
        ProfileResponseDto: {
            id: string;
            email: string;
            name: string;
            role: string;
            image: string;
        };
        RegisterRequestDto: {
            /** @example example@me.com */
            email: string;
            /** @example password */
            password: string;
            /** @example John Doe */
            name: string;
        };
        RegisterResponseDto: {
            /** @example Registration successful. Check your email for verification. */
            message: string;
        };
        VerifyEmailDto: {
            /**
             * @description The email verification token
             * @example abcd1234
             */
            token: string;
        };
        VerifyEmailResponseDto: {
            /**
             * @description The email verification token
             * @example abcd1234
             */
            token: string;
        };
        TimeSlotDto: {
            id: number;
            /** Format: date-time */
            startTime: string;
            /** Format: date-time */
            endTime: string;
            peopleCount: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            studioId: string;
            bookingId: number;
            /** @description Time slot price as fixed decimal value */
            price: string;
        };
        TimeSlotsDto: {
            timeSlots: components["schemas"]["TimeSlotDto"][];
        };
        MakeTimeSlotDto: {
            startTime: string;
            endTime: string;
            studio: string;
            /** @example 2 */
            peopleCount: number;
        };
        MakeBookingDto: {
            slots: components["schemas"]["MakeTimeSlotDto"][];
        };
        BookingDto: {
            id: number;
            userId: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            timeSlots: components["schemas"]["TimeSlotDto"][];
        };
        PricedTimeSlotDto: {
            /** Format: date-time */
            startTime: string;
            /** Format: date-time */
            endTime: string;
            price: number;
            studioId: string;
        };
        PricesStudioResponseDto: {
            prices: components["schemas"]["PricedTimeSlotDto"][];
            studioId: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequestDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponseDto"];
                };
            };
            /** @description Validation Failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description JWT Validation Failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponseDto"];
                };
            };
        };
    };
    AuthController_resetPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetPasswordRequestDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResetPasswordResponseDto"];
                };
            };
            /** @description Validation Failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
        };
    };
    AuthController_newPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NewPasswordRequestDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewPasswordResponseDto"];
                };
            };
            /** @description Validation Failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogoutResponseDto"];
                };
            };
        };
    };
    AuthController_profile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileResponseDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponseDto"];
                };
            };
        };
    };
    AuthController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequestDto"];
            };
        };
        responses: {
            /** @description User registered */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterResponseDto"];
                };
            };
            /** @description Validation Failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
        };
    };
    AuthController_verify: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyEmailDto"];
            };
        };
        responses: {
            /** @description Verification success. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VerifyEmailResponseDto"];
                };
            };
            /** @description Validation Failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
        };
    };
    TimeSlotsController_getTimeSlots: {
        parameters: {
            query?: {
                /** @description User ID to filter time slots */
                userId?: string;
                /** @description Studio IDs to filter time slots */
                studioIds?: string[];
                /** @description Start date in ISO format */
                startDate?: string;
                /** @description End date in ISO format */
                endDate?: string;
                /** @description Number of people */
                peopleCount?: number;
                /** @description Page number for pagination */
                page?: number;
                /** @description Limit for pagination */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all time slots */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TimeSlotsDto"];
                };
            };
            /** @description Validation Failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description JWT Validation Failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponseDto"];
                };
            };
        };
    };
    TimeSlotsController_getTimeSlotsByUserId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of time slots for the specified user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TimeSlotDto"][];
                };
            };
            /** @description JWT Validation Failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponseDto"];
                };
            };
        };
    };
    BookingsController_makeBooking: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MakeBookingDto"];
            };
        };
        responses: {
            /** @description Successfully made a booking */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookingDto"];
                };
            };
            /** @description Validation Failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description JWT Validation Failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponseDto"];
                };
            };
        };
    };
    BookingsController_getPrices: {
        parameters: {
            query: {
                from: string;
                to: string;
            };
            header?: never;
            path: {
                studioId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully fetched prices */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PricesStudioResponseDto"];
                };
            };
            /** @description Validation Failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description JWT Validation Failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponseDto"];
                };
            };
        };
    };
    BookingsController_getAllPrices: {
        parameters: {
            query: {
                from: string;
                to: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Prices for all studios */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PricesStudioResponseDto"][];
                };
            };
            /** @description Validation Failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseDto"];
                };
            };
            /** @description JWT Validation Failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedResponseDto"];
                };
            };
        };
    };
}
